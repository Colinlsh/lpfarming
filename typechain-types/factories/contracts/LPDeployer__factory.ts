/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LPDeployer,
  LPDeployerInterface,
} from "../../contracts/LPDeployer";

const _abi = [
  {
    inputs: [],
    name: "lpParameters",
    outputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rewardProportion",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c9f8350314610030575b600080fd5b610038610051565b60405161004894939291906100ed565b60405180910390f35b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b6100d881610132565b82525050565b6100e781610164565b82525050565b600060808201905061010260008301876100cf565b61010f60208301866100cf565b61011c60408301856100cf565b61012960608301846100de565b95945050505050565b600061013d82610144565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600081905091905056fea26469706673582212205d35111c4c31ee61c15ecbfc243da7b35717bec6d51439a97f1c4fe6d26cc72664736f6c63430008040033";

type LPDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPDeployer__factory extends ContractFactory {
  constructor(...args: LPDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LPDeployer> {
    return super.deploy(overrides || {}) as Promise<LPDeployer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LPDeployer {
    return super.attach(address) as LPDeployer;
  }
  override connect(signer: Signer): LPDeployer__factory {
    return super.connect(signer) as LPDeployer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPDeployerInterface {
    return new utils.Interface(_abi) as LPDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPDeployer {
    return new Contract(address, _abi, signerOrProvider) as LPDeployer;
  }
}
