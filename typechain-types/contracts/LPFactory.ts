/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface LPFactoryInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "createLPFarm(address,uint256)": FunctionFragment;
    "getLPFarms()": FunctionFragment;
    "lpFarmOwner(address)": FunctionFragment;
    "lpFarms(uint256)": FunctionFragment;
    "lpParameters()": FunctionFragment;
    "tokenRewardFarm(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "createLPFarm"
      | "getLPFarms"
      | "lpFarmOwner"
      | "lpFarms"
      | "lpParameters"
      | "tokenRewardFarm"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createLPFarm",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPFarms",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpFarmOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lpFarms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardFarm",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLPFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLPFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpFarmOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardFarm",
    data: BytesLike
  ): Result;

  events: {
    "LPCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LPCreated"): EventFragment;
}

export interface LPCreatedEventObject {
  owner: string;
  lp: string;
}
export type LPCreatedEvent = TypedEvent<[string, string], LPCreatedEventObject>;

export type LPCreatedEventFilter = TypedEventFilter<LPCreatedEvent>;

export interface LPFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LPFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    createLPFarm(
      token: string,
      rewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLPFarms(overrides?: CallOverrides): Promise<[string[]]>;

    lpFarmOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    lpFarms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    lpParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        factory: string;
        owner: string;
        token: string;
        rewardProportion: BigNumber;
      }
    >;

    tokenRewardFarm(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  createLPFarm(
    token: string,
    rewardProportion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLPFarms(overrides?: CallOverrides): Promise<string[]>;

  lpFarmOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  lpFarms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  lpParameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      factory: string;
      owner: string;
      token: string;
      rewardProportion: BigNumber;
    }
  >;

  tokenRewardFarm(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    createLPFarm(
      token: string,
      rewardProportion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLPFarms(overrides?: CallOverrides): Promise<string[]>;

    lpFarmOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    lpFarms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    lpParameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        factory: string;
        owner: string;
        token: string;
        rewardProportion: BigNumber;
      }
    >;

    tokenRewardFarm(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LPCreated(address,address)"(
      owner?: string | null,
      lp?: null
    ): LPCreatedEventFilter;
    LPCreated(owner?: string | null, lp?: null): LPCreatedEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    createLPFarm(
      token: string,
      rewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLPFarms(overrides?: CallOverrides): Promise<BigNumber>;

    lpFarmOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpFarms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lpParameters(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRewardFarm(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLPFarm(
      token: string,
      rewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLPFarms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpFarmOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpFarms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRewardFarm(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
